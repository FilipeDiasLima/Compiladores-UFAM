/*
	compilador v. 2019
*/
import java.util.List;
import java.util.ArrayList;

class NDesig {
	String nome;
	boolean vec;
	public NDesig(String n, boolean v) {
		nome = n;
		vec = v;
	}
	public String getNome() {
		return nome;
	}
	public boolean vetor() {
		return vec;
	}
}

COMPILER uBasic
	boolean temMain;
	private Tab ts;
	private Obj ofuncAtual;

	private Code objCode;

	private Struct getTipo(String tipo, boolean vec) { 
		Obj o = ts.buscar(tipo);
		Struct st = o.tipo;
		if (vec) st = new Struct(Struct.Vetor, o.tipo);
		return st;	
	}

	public void erro(String msg) {
		errors.SemErr(t.line, t.col, msg);
	}

CHARACTERS
  semAspas 	= ANY - '"'.
	letra 		= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".
	digito 		= "0123456789".

TOKENS
  id 		    = letra {letra | digito}.
	strConst 	= '"' {semAspas} '"'.
	num 		= ['-'] digito { digito } .


COMMENTS FROM "'" TO "\n" NESTED

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS

	uBasic 												(. 	ofuncAtual = null;
																		temMain=false;
                                   	objCode = new Code();
                                   	ts = new Tab(this);
                                   	ts.abrirEscopo("Global");
                                .)
	= { Global 
	| Sub 									
	| Funcao 
	} 														(.  if(ts.getNomeEscopo() == "Global" && temMain==false) {
																			String nome = "main"; 
																			ofuncAtual = ts.inserir(Obj.Func, nome, null);
																			ts.abrirEscopo(nome); 
																			objCode.setMainPC();
																			ofuncAtual.end = objCode.getPC();
																			ofuncAtual.nPars=0;
																			objCode.put(objCode.enter);
																			objCode.put(ofuncAtual.nPars);
																			int pcvars = objCode.getPC();
																			objCode.put(0);
																			temMain=true;
																		} 
																	.)
	Instrucao 										
	{ Instrucao 
	}															 (. objCode.put(objCode.exit);
																		objCode.put(objCode.return_);
																		if(ts.getNomeEscopo() == "main") {
																			ts.fecharEscopo();
																		}
																		objCode.setDataSize(ts.escopoAtual.nVars);
                                   	ts.fecharEscopo(); .)
	.

	Global 
	= "Global" 
	id 														(. ts.inserir(Obj.Var, t.val, null); .)
	{ "," id 											(. ts.inserir(Obj.Var, t.val, null); .)
	} 														
	.

	Funcao 
	= "Function" 
	id 												(. String nome = t.val; 
																ofuncAtual = ts.inserir(Obj.Func, t.val, null);
																ts.abrirEscopo("Func " + t.val); .)
	"(" 											(. 	if (nome.equals("main")) {
																	objCode.setMainPC();
																	temMain = true;
																}	.)
	[ id 											(. ts.inserir(Obj.Var, t.val, null);
															 ofuncAtual.nPars++; .)
	{ "," id 									(. ts.inserir(Obj.Var, t.val, null);
															 ofuncAtual.nPars++; .)
	} 
	] 
	")"												(. 	ofuncAtual.end = objCode.getPC();
																objCode.put(objCode.enter);
																objCode.put(ofuncAtual.nPars);
																int pcvars = objCode.getPC();
																objCode.put(0);
																 .) 
	Instrucoes 								(. 	objCode.put(pcvars, ts.escopoAtual.nVars);
																objCode.put(objCode.exit);
																objCode.put(objCode.return_);
																objCode.put(objCode.trap);
                                objCode.put(1);
																ofuncAtual.locais = ts.escopoAtual.locais;
																ts.fecharEscopo(); .)
	"End" "Function"
	.

	Sub 
	= "Sub" 										
	id 													(. String nome = t.val; 
																 ofuncAtual = ts.inserir(Obj.Func, t.val, null);
																 ts.abrirEscopo("Func " + t.val); .)
	"(" 											(. 	if (nome.equals("main")) {
																	objCode.setMainPC();
																	temMain = true;
																} .)
	[ id 											(. ts.inserir(Obj.Var, t.val, null);
															 ofuncAtual.nPars++; .)
	{ "," id 									(. ts.inserir(Obj.Var, t.val, null);
															 ofuncAtual.nPars++; .)
	} 
	] 
	")"												(. 	ofuncAtual.end = objCode.getPC();
																objCode.put(objCode.enter);
																objCode.put(ofuncAtual.nPars);
																int pcvars = objCode.getPC();
																objCode.put(0); .)				
	Instrucoes 								  (. 	objCode.put(pcvars, ts.escopoAtual.nVars);
																	objCode.put(objCode.exit);
																	objCode.put(objCode.return_);
																	ofuncAtual.locais = ts.escopoAtual.locais;
																	ts.fecharEscopo(); .)
	"End" "Sub"
	.

	Instrucoes 
	= { 
		Instrucao 
		}
		.

	Instrucao 									(. int opr; .)
	= Dim 
	| AssignCall
	| If 
	| While 
	| For 
	| Return 
	| Print 
	| Input
	.

	Dim														
	= "Dim" 
	id 														(. ts.inserir(Obj.Var, t.val, null); .)
	{ "," id 											(. ts.inserir(Obj.Var, t.val, null); .)
	} 
	.

	AssignCall 										(. 	Operand o2 = null; 	Operand o1 = null; .)
	= 
	id 														(. String nome = t.val;
																	 o1 = new Operand(ts.buscar(nome)); .)
	( "=" Exp<out o2> 						(. objCode.assign(o1, o2); .)
	| ParametrosReais<o1> 				(. 	objCode.put(objCode.call);
                                   	objCode.put2(o1.end); .)
	)
	.

	If										(. 	int opr1, opr2, end; .) 
	= "If" 
	Condicao<out opr1> 		(. 	end = objCode.putFalseJump(opr1, 0); .)
	Instrucoes 
	{ "ElseIf" 						(. 	int end1 = objCode.putJump(0);
                            objCode.fixup(end); .)
	Condicao<out opr2> 		(. 	end1 = objCode.putFalseJump(opr2, 0); .)
	Instrucoes						(. 	objCode.fixup(end1); .)
	 } 
	 [ 
		 "Else" 						(. 	int end2 = objCode.putJump(0);
                            objCode.fixup(end); .)
		 Instrucoes 				(. 	objCode.fixup(end2); .)
		 ] 										
		 "End" "If"					(. 	objCode.fixup(end); .)
		 .

	While									(. 	int opr, end; .) 
	= "While" 						(. 	int top = objCode.getPC(); .)
	Condicao<out opr> 		(. 	end = objCode.putFalseJump(opr, 0); .)
	Instrucoes 						(. 	objCode.putJump(top);
							       	objCode.fixup(end);
                                .)
	"End" "While"
	.

	For										(. int opr = -1; int end, end2, opr1; Operand op, op2, o2, opx, opy; opx = opy = op = op2 = null; .) 
	= "For" 
	id 										(. String nome = t.val;
													 opx = new Operand(ts.buscar(nome));
													 op = new Operand(ts.buscar(nome)); .)
	"=" 
	Exp<out o2>						(. objCode.assign(opx, o2); .)		
	"To" Exp<out opy> 		(. int antes_incremento = objCode.getPC();
													 objCode.load(opx); 
													 opr = objCode.le; 
													 objCode.load(opy);
													 end = objCode.putFalseJump(opr, 0);
													  .)
	Instrucoes 						(. opr1 = objCode.add;
													 op2 = new Operand(Integer.parseInt("1"));
													 objCode.load(op);
													 objCode.load(op2);
													 objCode.put(opr1);
													  .)
	"Next" 								
	id										(. op = new Operand(ts.buscar(t.val));
													 objCode.store(op);
													 objCode.putJump(antes_incremento);
							       			 objCode.fixup(end); .)
	.

	Return						(. 	Operand op = null; .) 
	= "Return" Exp<out op> (.	objCode.load(op);
                            objCode.put(Code.exit);
							       				objCode.put(Code.return_);  .)
	.

	Print						(. 	String s; Operand op; .)
	 = "Print" 
	 ( strConst 		(. 	s = t.val.substring(1, t.val.length() - 1);
							       	objCode.putPrintStrz(s); .)
	 | Exp<out op> 	(. 	objCode.load(op);
							       	objCode.put(objCode.printi); .)
	 ) 
	 { "," 
	 (strConst 			(. 	s = t.val.substring(1, t.val.length() - 1);
                      objCode.putPrintStrz(s); .)
	 | Exp<out op>	(. 	objCode.load(op);
                      objCode.put(objCode.printi); .)
	 ) 
	 } 
	 .

	Input 						(. 	Operand op;  int i; String s; .)
	= "Input" 		
	[ 
		strConst 				(. 	s = t.val.substring(1, t.val.length() - 1);
							       		objCode.putPrintStrz(s); .)
		"," 
		] 
		id							(.	objCode.put(objCode.scani); 
												op = new Operand(ts.buscar(t.val));
												objCode.store(op);
										.)
		.

	ParametrosReais<Operand op>				(. 	Operand oppar; .) 
	= "(" 													(. 	if (op.cat != Operand.Func) {
								    	erro("nao é uma função");
                                    	op.obj = ts.semObj;
                                   	}
                                   	int preais = 0;
                                   	int pdecl = op.obj.nPars;
                                   	Obj fp = op.obj.locais;
                                .)
	[ Exp<out oppar>			(.  objCode.load(oppar);
							        			preais ++; .)
	 { "," Exp<out oppar> 	(. 	objCode.load(oppar);
							       					 preais ++; .)
	 } ] 								(. 	if (preais > pdecl)
								        erro("mais parametros passados que declarados");
                                   	else if (preais < pdecl)
								        erro("menos parametros passados que declarados"); 
                                .)
	 ")"
	 .

	Condicao<out int opr> 			(. 	Operand opx, opy; opx = opy = null; .)
	= Exp<out opx> 							(. 	objCode.load(opx); .)
	OpRel<out opr> 
	Exp<out opy>								(. objCode.load(opy); .)
	.

	OpRel<out int opr> 			(. 	opr = -1; .) 
	= "==" 									(. 	opr = objCode.eq; .)
	| "!=" 									(. 	opr = objCode.ne; .)
	| ">" 									(. 	opr = objCode.gt; .)
	| "<"										(. 	opr = objCode.lt; .)
	| ">=" 									(. 	opr = objCode.ge; .)
	| "<="									(. 	opr = objCode.le; .)
	.

	Exp<out Operand op> 		(. 	Operand op2; int opr; op = null; .)
	= (T<out op> 
	| "-" T<out op>					(. 
							        if (op.cat == Operand.Const)
								        op.val = -op.val;
                                   	else {
							   	        objCode.load(op);
								        objCode.put(objCode.neg);
							        }
                                .)
	) { ("+"						(. 	opr = objCode.add; .)
	|"-"								(. 	opr = objCode.sub; .)
	) 									(. 	objCode.load(op); .)
	T<out op2> 					(. 	objCode.load(op2);
													objCode.put(opr); 
													.)
	}
	.

	T<out Operand op>		(. 	Operand op2; int opr; op = null; .) 
	= P<out op> 
	{ ("*"							 (. 	opr = objCode.mul; .)
	|"/"									(. 	opr = objCode.div; .)
	|"%"									(. 	opr = objCode.rem; .)
	) 										(. 	objCode.load(op); .)
	P<out op2> 						(. 	objCode.load(op2);
                            objCode.put(opr); .)
	}
	.

	P<out Operand op> 		(. 	op = null; List<Integer> list = null; String tp; .)
	= id 									(. 	String nome = t.val;   
														op = new Operand(ts.buscar(nome));
												.)
	[ ParametrosReais<op> (.    	
														objCode.put(objCode.call);
														objCode.put2(op.end); 
														op.cat = Operand.Stack; .)
	] 
	| num 										(. 	op = new Operand(Integer.parseInt(t.val)); .)
	| "(" Exp<out op> ")"			
	.

END uBasic.


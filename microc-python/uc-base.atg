import java.io.*;
import java.util.*;

class Global {
  public ArrayList<Funcao> funcoes;

  public Global() {
    funcoes = new ArrayList<Funcao>();
  }

  public void addFuncion(Funcao funcao) {
    funcoes.add(funcao);
  }

  public void getFunctions() {
    for(int i=0;i<funcoes.size()-1;i++) {
      System.out.println(funcoes.get(i).retornaFuncao());
    }
  }
}

class Funcao {
  String nome;
  ArrayList<String> parametros = new ArrayList<String>();
  Bloco bloco;

  public Funcao(String nome) {
    this.nome = nome;
  }

  public void setName(String nome) {
    this.nome = nome;
  }

  public String getName() {
    return this.nome;
  }

  public void addParam(String param) {
    parametros.add(param);
  }

  public String getParams() {
    String params = "";
    for(int i=0;i<parametros.size();i++) {
      if(i+1 == parametros.size()) {
        params += parametros.get(i);  
      } else {
        params += parametros.get(i) + ", ";
      }
    }
    return params;
  }

  public void setBloco(Bloco bloco) {
    this.bloco = bloco;
  }

  public String retornaFuncao() {
    return "def " + nome + "(" + getParams() + "):" + "\n" + bloco.getBloco();
  }
}

class Bloco {
  NDesig nd; // nd(string, boolean)
  public ArrayList<Instruction> instrucoes;

  public Bloco() {
    instrucoes = new ArrayList<Instruction>();
  }

  public void addInstrucao(Instruction instr) {
    instrucoes.add(instr);
  }

  public String getBloco() {
    String bloco="";
    for(int i=0;i<instrucoes.size();i++) {
      if(i+1==instrucoes.size()) {
        bloco += "  " + instrucoes.get(i).getInstrucao();
      } else {
        bloco += "  " + instrucoes.get(i).getInstrucao() + "\n";
      }
    }
    return bloco;
  }
}

class Instruction {
  String instr;

  public Instruction(String instr) {
    this.instr = instr;
  }

  public void setInstrucao(String instr) {
    this.instr = instr;
  }

  public String getInstrucao() {
    return this.instr;
  }

  public void printComando(String text, ArrayList<String> vars) {   
	  String print = "print('" + text + "', ";
	    
    for(int i=0;i<vars.size();i++) {
      if(i==vars.size()-1) {
        print+=vars.get(i);
      } else {
        print+=vars.get(i) + ", ";
      }
    }
    
    print += ")";
    setInstrucao(print);
  }
}

class NDesig {
	String nome;
	boolean vec;
	public NDesig(String n, boolean v) {
		nome = n;
		vec = v;
	}
	public String getName() {
		return nome;
	}
	public boolean vetor() {
		return vec;
	}
}

COMPILER Python

  Global global;
  Funcao func;
  Bloco bloco;
  Instruction instr;

  public void erro(String msg) {
		errors.SemErr(t.line, t.col, msg);
	}

CHARACTERS
  semAspas 	= ANY - '"'.
	letra 		= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".
	digito 		= "0123456789".

TOKENS
  id 		    = letra {letra | digito}.
	strConst 	= '"' {semAspas} '"'.
	num 		= ['-'] digito { digito } .


COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS
  Python = {DeclConst} {Definicao}.         

  DeclConst = "const" id "=" num ";" .

	Definicao = ( Tipo | "void") DesigI ( DeclVar | DeclFuncao ).

	DeclVar = {"," DesigI } ";".

  DeclFuncao = "(" [ Tipo DesigI {"," Tipo DesigI} ]")" CBlock.
	
	Tipo = "int".		

	DesigI = id ["[" "]"].                         

	CBlock = "{" { Definicao | Instrucao } "}".

	Instrucao = Designador ( 
    Assinalamento
    | Parametros 
    ) ";"
    | While
    | For
    | IfElse
    | Return
    | Printf
    | CBlock
    | ";"
  .

  Assinalamento = "=" Expr.

	While = "while" "(" Condicao ")" Instrucao .

	For = "for" "(" Designador Assinalamento ";" Condicao ";" Designador Assinalamento ")" Instrucao .

	IfElse = "if" "(" Condicao ")" Instrucao  ("else" Instrucao | ).

	Return = "return" (Expr | ) ";".

	Printf = "printf" "(" ( strConst | Expr ) { "," ( strConst | Expr ) } ")" ";".

	Parametros = "(" [ Expr {"," Expr } ] ")".

	Condicao = Expr OpRel Expr.

	OpRel = "=="
      | "!="
      | ">"
      | ">="
      | "<"
      | "<=".

  // 5 + 1 ou i - j
	Expr = ( Termo | "-" Termo ) {( "+" | "-" ) Termo }.	

  // 3 ou (3*i) ou 3/i ou 3%i
	Termo = Fator
      {(  "*"
        | "/"
        | "%"
       ) Fator }.

  // funcaoTal() ou 3 ou (i) ou new int [len(v)] ou new int {1} 
	Fator                       (. NDesig nd; .)
  = Designador[ Parametros ] 
    | num 
    | "(" Expr ")" 
    | "new" Tipo ("[" Expr "]" 
    | "{" num {"," num } "}" ).

  // v ou v[j]
	Designador = id ["["Expr"]"].     

END Python.